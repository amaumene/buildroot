diff --git a/src/core/linux/SDL_evdev.c b/src/core/linux/SDL_evdev.c
index 4761f3e..4ea3556 100644
--- a/src/core/linux/SDL_evdev.c
+++ b/src/core/linux/SDL_evdev.c
@@ -245,7 +245,7 @@ SDL_EVDEV_Init(void)
         
         /* We need a physical terminal (not PTS) to be able to translate key
            code to symbols via the kernel tables */
-        _this->console_fd = SDL_EVDEV_get_active_tty();
+        _this->console_fd = -1; // lazy loading, load it only when required
         
         /* Mute the keyboard so keystrokes only generate evdev events and do not
            leak through to the console */
@@ -317,6 +317,81 @@ void SDL_EVDEV_udev_callback(SDL_UDEV_deviceevent udev_event, int udev_class,
 #endif /* SDL_USE_LIBUDEV */
 
 #ifdef SDL_INPUT_LINUXKD
+
+static void SDL_EVDEV_do_text_input_old(unsigned short keycode) {
+    Uint16 modstate;
+    struct kbentry kbe;
+    static char keysym[8];
+    char *end;
+    Uint32 kval;
+    int ioctlres;
+
+    if (_this->console_fd < 0) {
+      // in case of ioctl failure, try to reopen the tty (an other chance)
+      // it could be open too soon on the boot process
+      // tty is sometimes manipulated by an other program
+
+      /* We need a physical terminal (not PTS) to be able to translate key
+	 code to symbols via the kernel tables */
+      _this->console_fd = SDL_EVDEV_get_active_tty();
+
+      /* Mute the keyboard so keystrokes only generate evdev events and do not
+	 leak through to the console */
+      SDL_EVDEV_mute_keyboard(_this->console_fd, &_this->kb_mode);
+    }
+
+    if (_this->console_fd >= 0) {
+      kbe.kb_index = keycode;
+      /* Convert the key to an UTF-8 char */
+      /* Ref: http://www.linuxjournal.com/article/2783 */
+      modstate = SDL_GetModState();
+      kbe.kb_table = 0;
+
+      /* Ref: http://graphics.stanford.edu/~seander/bithacks.html#ConditionalSetOrClearBitsWithoutBranching */
+      kbe.kb_table |= -((modstate & KMOD_LCTRL) != 0) & (1 << KG_CTRLL | 1 << KG_CTRL);
+      kbe.kb_table |= -((modstate & KMOD_RCTRL) != 0) & (1 << KG_CTRLR | 1 << KG_CTRL);
+      kbe.kb_table |= -((modstate & KMOD_LSHIFT) != 0) & (1 << KG_SHIFTL | 1 << KG_SHIFT);
+      kbe.kb_table |= -((modstate & KMOD_RSHIFT) != 0) & (1 << KG_SHIFTR | 1 << KG_SHIFT);
+      kbe.kb_table |= -((modstate & KMOD_LALT) != 0) & (1 << KG_ALT);
+      kbe.kb_table |= -((modstate & KMOD_RALT) != 0) & (1 << KG_ALTGR);
+
+      ioctlres = ioctl(_this->console_fd, KDGKBENT, (unsigned long)&kbe);
+      if(ioctlres != 0) {
+	// in case of ioctl failure, try to reopen the tty (an other chance)
+	// tty is sometimes manipulated by an other program
+	close(_this->console_fd); // can fails, anyway
+	_this->console_fd = SDL_EVDEV_get_active_tty();
+	SDL_EVDEV_mute_keyboard(_this->console_fd, &_this->kb_mode);
+	if(_this->console_fd >= 0) {
+	  ioctlres = ioctl(_this->console_fd, KDGKBENT, (unsigned long)&kbe);
+	}
+      }
+
+      if (ioctlres == 0 && 
+	  ((KTYP(kbe.kb_value) == KT_LATIN) || (KTYP(kbe.kb_value) == KT_ASCII) || (KTYP(kbe.kb_value) == KT_LETTER)))
+	{
+	  kval = KVAL(kbe.kb_value);
+
+	  /* While there's a KG_CAPSSHIFT symbol, it's not useful to build the table index with it
+	   * because 1 << KG_CAPSSHIFT overflows the 8 bits of kb_table
+	   * So, we do the CAPS LOCK logic here. Note that isalpha depends on the locale!
+	   */
+	  if (modstate & KMOD_CAPS && isalpha(kval)) {
+	    if (isupper(kval)) {
+	      kval = tolower(kval);
+	    } else {
+	      kval = toupper(kval);
+	    }
+	  }
+
+	  /* Convert to UTF-8 and send */
+	  end = SDL_UCS4ToUTF8(kval, keysym);
+	  *end = '\0';
+	  SDL_SendKeyboardText(keysym);
+	}
+    }
+}
+
 /* this logic is pulled from kbd_keycode() in drivers/tty/vt/keyboard.c in the
    Linux kernel source */
 static void SDL_EVDEV_do_text_input(unsigned short keycode) {
@@ -325,13 +400,28 @@ static void SDL_EVDEV_do_text_input(unsigned short keycode) {
     struct kbentry kbe;
     unsigned char type;
     char text[2] = { 0 };
-    
+
+    if (_this->console_fd < 0) {
+      // in case of ioctl failure, try to reopen the tty (an other chance)
+      // it could be open too soon on the boot process
+      // tty is sometimes manipulated by an other program
+
+      /* We need a physical terminal (not PTS) to be able to translate key
+	 code to symbols via the kernel tables */
+      _this->console_fd = SDL_EVDEV_get_active_tty();
+
+      /* Mute the keyboard so keystrokes only generate evdev events and do not
+	 leak through to the console */
+      SDL_EVDEV_mute_keyboard(_this->console_fd, &_this->kb_mode);
+    }
+
     if (_this->console_fd < 0)
         return;
     
     shift_state = TIOCL_GETSHIFTSTATE;
     if (ioctl(_this->console_fd, TIOCLINUX, &shift_state) < 0) {
         /* TODO: error */
+        _this->console_fd = -1;
         return;
     }
 
@@ -340,6 +430,7 @@ static void SDL_EVDEV_do_text_input(unsigned short keycode) {
     
     if (ioctl(_this->console_fd, KDGKBENT, &kbe) < 0) {
         /* TODO: error */
+        _this->console_fd = -1;
         return;
     }
     
@@ -370,6 +461,7 @@ static void SDL_EVDEV_do_text_input(unsigned short keycode) {
     
         if (ioctl(_this->console_fd, KDGKBLED, &locks_state) < 0) {
             /* TODO: error */
+            _this->console_fd = -1;
             return;
         }
         
@@ -378,6 +470,7 @@ static void SDL_EVDEV_do_text_input(unsigned short keycode) {
             
             if (ioctl(_this->console_fd, KDGKBENT, &kbe) < 0) {
                 /* TODO: error */
+                _this->console_fd = -1;
                 return;
             }
         }
@@ -444,7 +537,8 @@ SDL_EVDEV_Poll(void)
                         } else if (events[i].value == 1 || events[i].value == 2 /* key repeated */) {
                             SDL_SendKeyboardKey(SDL_PRESSED, scan_code);
 #ifdef SDL_INPUT_LINUXKD
-                            SDL_EVDEV_do_text_input(events[i].code);
+                            //SDL_EVDEV_do_text_input(events[i].code);
+			    SDL_EVDEV_do_text_input_old(events[i].code);
 #endif /* SDL_INPUT_LINUXKD */
                         }
                     }
